#include <DHT.h>
#define DHTTYPE DHT11

#define DHT_PIN 8
#define LAMP_PIN 6
#define FAN_PIN 7
#define HEATER_PIN 4
#define PUMP_PIN 5
#define HUM_SOIL_PIN A1
#define LIGHTING_PIN A3

DHT dht(DHT_PIN, DHTTYPE);

class Climate {
public:
    int temperature_min;
    int temperature_max;
    int humidity_soil_min;
    int humidity_soil_max;
    int air_humidity_min;
    int air_humidity_max;
    int lighting_min;
    int lighting_max;
};

class Soil_Humidifier {
public:
    int soil_humidity;
    uint8_t hum_soil_pin;
    Soil_Humidifier(uint8_t pin) : hum_soil_pin(pin) {}
    int get_soil_humidity() {
        return analogRead(hum_soil_pin);
    }
};

class Air_Humidifier {
public:
    float air_humidity = NAN;
    uint8_t air_hum_pin;
    Air_Humidifier(uint8_t pin) : air_hum_pin(pin) {}
    void get_air_humidity() {
        air_humidity = dht.readHumidity();
    }
};

class Thermometer {
public:
    float temperature = NAN;
    uint8_t thermometer_pin;
    Thermometer(uint8_t pin) : thermometer_pin(pin) {}
    void get_temperature() {
        temperature = dht.readTemperature();
    }
};

class Heater {
public:
    bool on_temperature = false;
    uint8_t heater_pin;
    Heater(uint8_t pin) : heater_pin(pin) {}
    void start() { digitalWrite(HEATER_PIN, true); }
    void stop() { digitalWrite(HEATER_PIN, false); }
};

class Ventilator {
public:
    bool on_temperature = false;
    bool on_schedule = false;
    uint8_t fan_pin;
    Ventilator(uint8_t pin) : fan_pin(pin) {}
    void start() { digitalWrite(FAN_PIN, true); }
    void stop() { digitalWrite(FAN_PIN, false); }
};

class Pump {
public:
    bool is_active = false;
    int dead_time;
    uint8_t pump_pin;
    Pump(uint8_t pin, int dead_time) : pump_pin(pin), dead_time(dead_time) {}
    void start() { digitalWrite(PUMP_PIN, true); }
    void stop() { digitalWrite(PUMP_PIN, false); }
};

class Light {
public:
    bool is_need_to_light = false;
    uint8_t lamp_pin;
    Light(uint8_t pin) : lamp_pin(pin) {}
    void start() { digitalWrite(LAMP_PIN, true); }
    void stop() { digitalWrite(LAMP_PIN, false); }
};

class Photoresistor {
public:
    int lighting_level = 0;
    uint8_t lighting_pin;
    Photoresistor(uint8_t pin) : lighting_pin(pin) {}
    void get_lighting_level() {
        lighting_level = analogRead(LIGHTING_PIN);
    }
};

class Datatime {
public:
    int hours = 0;
    int minutes = 0;
    int seconds = 0;
    unsigned long long lastUpdate = 0;

    void update_time() {
        if (millis() - lastUpdate >= 1000) {
            lastUpdate = millis();
            seconds++;
            if (seconds >= 60) {
                seconds = 0;
                minutes++;
            }
            if (minutes >= 60) {
                minutes = 0;
                hours++;
            }
            if (hours >= 24) {
                hours = 0;
            }
        }
    }

    void set_time(int h, int m, int s) {
        hours = h;
        minutes = m;
        seconds = s;
        lastUpdate = millis();
    }
};

// === Глобальные переменные ===
Datatime datatime;
Climate climate_tomato;

void set_climate_tomato(Climate &climate) {
    climate.temperature_max = 30;
    climate.temperature_min = 20;
    climate.humidity_soil_max = 10;
    climate.humidity_soil_min = 500;
    climate.lighting_min = 100;
    climate.lighting_max = 400;
}

void control_temperature(Climate climate, Thermometer thermometer, Heater &heater, Ventilator &ventilator) {
    thermometer.get_temperature();
    if (thermometer.temperature < climate.temperature_min) {
        heater.on_temperature = true;
        ventilator.on_temperature = true;
    }
    if (thermometer.temperature > climate.temperature_max) {
        heater.on_temperature = false;
        ventilator.on_temperature = true;
    }
}

void control_ventilation(Datatime datatime, Ventilator &ventilator, Heater &heater) {
    if (datatime.hours < 6 || datatime.hours > 23) {
        ventilator.on_schedule = false;
        return;
    }
if (datatime.hours % 4 == 0) {
        ventilator.on_schedule = true;
    } else {
        ventilator.on_schedule = false;
    }
}

void control_soil_humidity(Climate climate, Pump &pump, Soil_Humidifier &soil_humidifier, Heater &heater) {
    static unsigned long long pump_last_toggle_time = 0;
    if (millis() - pump_last_toggle_time > pump.dead_time) {
        int soil = soil_humidifier.get_soil_humidity();
        if (soil < climate.humidity_soil_max) {
            if (heater.on_temperature) heater.on_temperature = false;
            pump.is_active = true;
            pump_last_toggle_time = millis();
        } else if (soil > climate.humidity_soil_min) {
            pump.is_active = false;
            pump_last_toggle_time = millis();
        }
    }
}

void control_lighting(Datatime datatime, Climate &climate, Light &light, Photoresistor &photoresistor) {
    if (datatime.hours < 6 || datatime.hours > 23) {
        light.is_need_to_light = false;
    } else {
        photoresistor.get_lighting_level();
        if (photoresistor.lighting_level < climate.lighting_min) {
            light.is_need_to_light = true;
        } else {
            light.is_need_to_light = false;
        }
    }
}

void do_ventilation(Ventilator ventilator) {
    if (ventilator.on_temperature || ventilator.on_schedule) {
        ventilator.start();
    } else {
        ventilator.stop();
    }
}

void do_light(Light light) {
    if (light.is_need_to_light) {
        light.start();
    } else {
        light.stop();
    }
}

void do_heat(Heater heater) {
    if (heater.on_temperature) {
        heater.start();
    } else {
        heater.stop();
    }
}

void do_pump(Pump pump) {
    if (pump.is_active) {
        pump.start();
    } else {
        pump.stop();
    }
}

void pins_init() {
    pinMode(LAMP_PIN, OUTPUT);
    pinMode(FAN_PIN, OUTPUT);
    pinMode(HEATER_PIN, OUTPUT);
    pinMode(PUMP_PIN, OUTPUT);
    pinMode(LIGHTING_PIN, INPUT);
}

void setup() {
    Serial.begin(9600);
    dht.begin();
    datatime.set_time(15, 30, 0);
    pins_init();
    set_climate_tomato(climate_tomato);
}

void loop() {
    datatime.update_time();

    static Thermometer thermometer_first(DHT_PIN);
    static Heater heater_first(HEATER_PIN);
    static Ventilator ventilator_first(FAN_PIN);
    static Soil_Humidifier soil_humidifier_first(HUM_SOIL_PIN);
    static Pump pump_first(PUMP_PIN, 5000);
    static Light light_first(LAMP_PIN);
    static Photoresistor photoresistor_first(LIGHTING_PIN);

    control_ventilation(datatime, ventilator_first, heater_first);
    control_temperature(climate_tomato, thermometer_first, heater_first, ventilator_first);
    control_soil_humidity(climate_tomato, pump_first, soil_humidifier_first, heater_first);
    control_lighting(datatime, climate_tomato, light_first, photoresistor_first);

    do_ventilation(ventilator_first);
    do_light(light_first);
    do_heat(heater_first);
    do_pump(pump_first);
}
