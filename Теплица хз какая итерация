#define PIN_LIGHT_SENSOR A0  // датчик освещенности
#define PIN_LIGHT 6  // светодиодная лента
#define PIN_GROUND_HUMIDITY_SENSOR A1  // датчик влажности почвы 
#define PIN_WATER_PUMP 5  // насос
#define PIN_TH_SENSOR 12   // датчик температуры и влажности воздуха
#define PIN_HEAT 4  // нагреватель
#define PIN_VEN 7  // вентилятор

#include <TroykaDHT.h>
DHT dht_sensor(PIN_TH_SENSOR, DHT11);

int time_check = 1;// секунда

struct Climat  { // устанавливаем параметры для растения
  int norm_lum = 600; // 0 - светло / 1023 - темно
  double min_air_temp = 23 ;// градусы  
  double max_air_temp = 27; // градусы 
  double min_air_humidity = 23; // проценты 
  double max_air_humidity = 30; // проценты
  int norm_ground_humidity =500;// 0 - влажно / 1023 - сухо
  int watering_time = 30 * 1000;// миллисекунды
  int ven_time = 2 * 1 * 1000;// миллисекунды
}; 

struct Sensor  {
  int hours;
  int minutes;
  int seconds;
  int day;
  int lum;  // текущая освещенность 
  double air_temp;  
  double air_humidity;
  int ground_humidity; // среднее значение влажности почвы
}; 

struct State  {
  bool light;
  bool ven;
  bool regular_ven;
  bool pump;
  bool heat;
  double ven_time; 
  double last_watering;
  double watering_time;
  bool is_pumping = 1;
}; 

Climat climat;
Sensor sensor;
State state;


void setup() {
  Serial.begin(9600);
  dht_sensor.begin ();
  pinMode(PIN_LIGHT, OUTPUT);
  pinMode(PIN_WATER_PUMP, OUTPUT);
  pinMode(PIN_TH_SENSOR, INPUT);
  pinMode(PIN_HEAT, OUTPUT);
  pinMode(PIN_VEN, OUTPUT);
}


void read_sensor()  // считывание данных
{
  dht_sensor.read();

  sensor.air_temp = dht_sensor.getTemperatureC();
  sensor.air_humidity = dht_sensor.getHumidity();
  sensor.ground_humidity = analogRead(PIN_GROUND_HUMIDITY_SENSOR);
  sensor.lum = analogRead(PIN_LIGHT_SENSOR);
}


void time()  // снятие данных с часов
{
  sensor.seconds = millis() / 1000;

  if (sensor.seconds % 60 == 0 && sensor.seconds != 0 ){
    sensor.minutes += 1; 
  }
  if (sensor.minutes % 60 == 0 && sensor.minutes != 0  ){
    sensor.hours += 1;
  }
  if (sensor.hours % 24 == 0 &&  sensor.hours != 0  ){
    sensor.hours = 0;
    sensor.day += 1;
  } 
}


void air_temp()
{
    if (sensor.air_temp >= climat.min_air_temp && sensor.air_temp <= climat.max_air_temp){
    state.ven = 0;
    state.heat = 0;
  } 
  if (sensor.air_temp < climat.min_air_temp){
    state.ven = 1;
    state.heat = 1;
  }
  if (sensor.air_temp > climat.max_air_temp){
    state.ven = 1;
    state.heat = 0;
  }
}



void air_humidity()
{
  if (sensor.air_humidity >= climat.min_air_humidity && sensor.air_humidity <= climat.max_air_humidity){
    state.ven = 0;
    state.pump = 0;
  } 
  if (sensor.air_humidity < climat.min_air_humidity){
    state.ven = 0;
    state.pump = 1;
  }
  if (sensor.air_humidity > climat.max_air_humidity){
    state.ven = 1;
    state.pump = 0;
  }
}


void ground_humidity()
{
  if (sensor.ground_humidity >= climat.norm_ground_humidity){
    state.pump = 1;
  }
  else{
    state.pump = 0;
  }
}


void light()
{
  if (sensor.lum >= climat.norm_lum){
    state.light = 1;
  }
  else{
    state.light = 0;
  }
}


void ventilation()  
{
  state.ven_time += time_check * 1000;
  if (sensor.minutes % 2 == 0){ 
    state.regular_ven = 1;
    state.ven_time = 0;
  }
  else {
    if (state.ven_time > climat.ven_time){
      state.regular_ven = 0;
    }
    else{
      state.regular_ven = 1;
    }
  }
}


void on_light()
{
  if (state.light == 1){
    digitalWrite(PIN_LIGHT, 1);
  }
   else{
    digitalWrite(PIN_LIGHT, 0);
  }
}


void on_heat()
{
  if (state.is_pumping == 1){
    digitalWrite(PIN_HEAT, 0);
  }
  else{
    if (state.heat == 1 ){
      digitalWrite(PIN_VEN, 1);
      digitalWrite(PIN_HEAT, 1);
   }
    else{
      digitalWrite(PIN_HEAT, 0);
    }
  }
}


void on_vent()
{
  if (state.regular_ven == 1 || state.ven == 1){
    digitalWrite(PIN_VEN, 1);
  }
  else{
    digitalWrite(PIN_VEN, 0);
  }
}


void on_pump() { 
  static unsigned long pump_timer = 0;  
  static bool is_pumping = 1;  
  unsigned long current_time = millis();  

  if (state.pump == 1) {  
    if (!is_pumping) { 
      if (current_time - state.last_watering >= 10000) {  
        digitalWrite(PIN_WATER_PUMP, 1);  
        pump_timer = current_time;  
        is_pumping = 1; 

      }
    } else { 
      if (current_time - pump_timer >= 5000) {  
        digitalWrite(PIN_WATER_PUMP, 0);  
        state.last_watering = current_time;
        is_pumping = 0; 
      }
    }
  } else {  
    digitalWrite(PIN_WATER_PUMP, 0); 
    is_pumping = 0;
  }
}



void loop() {
  time();
  if (sensor.seconds % time_check == 0){
  read_sensor();


  air_temp();
  air_humidity();
  ventilation();
  ground_humidity();
  light();

  on_light();
  on_vent();
  on_heat();
  on_pump();
  }
}
