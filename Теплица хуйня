#include <DHT.h>
#define DHTTYPE DHT11

#define DHT_PIN 8
#define LAMP_PIN 6
#define FAN_PIN 7
#define HEATER_PIN 4
#define PUMP_PIN 5
#define HUM_SOIL_PIN A1
#define LIGHTING_PIN A3

DHT dht(DHT_PIN, DHTTYPE);

class Climate {
public:
    int temperature_min;
    int temperature_max;
    int humidity_soil_min;
    int humidity_soil_max;
    int air_humidity_min;
    int air_humidity_max;
    int lighting_min;
    int lighting_max;
};

class Soil_Humidifier {
public:
    uint8_t hum_soil_pin;
    Soil_Humidifier(uint8_t pin) : hum_soil_pin(pin) {}
    int get_soil_humidity() {
        return analogRead(hum_soil_pin);
    }
};

class Air_Humidifier {
public:
    float air_humidity = NAN;
    uint8_t air_hum_pin;
    Air_Humidifier(uint8_t pin) : air_hum_pin(pin) {}
    void get_air_humidity() {
        air_humidity = dht.readHumidity();
    }
};

class Thermometer {
public:
    float temperature = NAN;
    uint8_t thermometer_pin;
    Thermometer(uint8_t pin) : thermometer_pin(pin) {}
    void get_temperature() {
        temperature = dht.readTemperature();
    }
};

class Heater {
public:
    bool on_temperature = false;
    uint8_t heater_pin;
    Heater(uint8_t pin) : heater_pin(pin) {}
    void start() { digitalWrite(heater_pin, HIGH); }
    void stop() { digitalWrite(heater_pin, LOW); }
};

class Ventilator {
public:
    bool on_temperature = false;
    bool on_schedule = false;
    uint8_t fan_pin;
    Ventilator(uint8_t pin) : fan_pin(pin) {}
    void start() { digitalWrite(fan_pin, HIGH); }
    void stop() { digitalWrite(fan_pin, LOW); }
};

class Pump {
public:
    bool is_active = false;
    int dead_time;
    uint8_t pump_pin;
    Pump(uint8_t pin, int dt) : pump_pin(pin), dead_time(dt) {}
    void start() { digitalWrite(pump_pin, HIGH); }
    void stop() { digitalWrite(pump_pin, LOW); }
};

class Light {
public:
    bool is_need_to_light = false;
    uint8_t lamp_pin;
    Light(uint8_t pin) : lamp_pin(pin) {}
    void start() { digitalWrite(lamp_pin, HIGH); }
    void stop() { digitalWrite(lamp_pin, LOW); }
};

class Photoresistor {
public:
    int lighting_level = 0;
    uint8_t lighting_pin;
    Photoresistor(uint8_t pin) : lighting_pin(pin) {}
    void get_lighting_level() {
        lighting_level = analogRead(lighting_pin);
    }
};

class Datatime {
public:
    int hours = 0, minutes = 0, seconds = 0;
    unsigned long lastUpdate = 0;
    void update_time() {
        if (millis() - lastUpdate >= 1000) {
            lastUpdate = millis();
            seconds++;
            if (seconds >= 60) { seconds = 0; minutes++; }
            if (minutes >= 60) { minutes = 0; hours++; }
            if (hours >= 24) { hours = 0; }
        }
    }
    void set_time(int h, int m, int s) {
        hours = h; minutes = m; seconds = s;
        lastUpdate = millis();
    }
};

void set_climate_tomato(Climate &climate) {
    climate.temperature_max = 30;
    climate.temperature_min = 20;
    climate.humidity_soil_max = 700;
    climate.humidity_soil_min = 400;
    climate.lighting_min = 100;
    climate.lighting_max = 400;
}

void control_temperature(Climate &climate, Thermometer &thermometer, Heater &heater, Ventilator &ventilator) {
    thermometer.get_temperature();
    if (thermometer.temperature < climate.temperature_min) {
        heater.on_temperature = true;
        ventilator.on_temperature = true;
    } else if (thermometer.temperature > climate.temperature_max) {
        heater.on_temperature = false;
        ventilator.on_temperature = true;
    } else {
        heater.on_temperature = false;
        ventilator.on_temperature = false;
    }
}

void control_ventilation(Datatime &datatime, Ventilator &ventilator) {
    if (datatime.hours < 6 || datatime.hours > 23) {
        ventilator.on_schedule = false;
        return;
    }
    ventilator.on_schedule = (datatime.hours % 4 == 0);
}

void control_soil_humidity(Climate &climate, Pump &pump, Soil_Humidifier &soil_humidifier, Heater &heater) {
    static unsigned long last_toggle = 0;
    if (millis() - last_toggle > pump.dead_time) {
        int soil = soil_humidifier.get_soil_humidity();
        if (soil < climate.humidity_soil_min) {
            heater.on_temperature = false;
            pump.is_active = true;
            last_toggle = millis();
        } else if (soil > climate.humidity_soil_max) {
            pump.is_active = false;
            last_toggle = millis();
        }
    }
}

void control_lighting(Datatime &datatime, Climate &climate, Light &light, Photoresistor &photoresistor) {
    if (datatime.hours < 6 || datatime.hours > 23) {
        light.is_need_to_light = false;
    } else {
        photoresistor.get_lighting_level();
        light.is_need_to_light = (photoresistor.lighting_level < climate.lighting_min);
    }
}

void do_ventilation(Ventilator &ventilator) {
    if (ventilator.on_temperature || ventilator.on_schedule) ventilator.start();
    else ventilator.stop();
}

void do_light(Light &light) {
    if (light.is_need_to_light) light.start();
    else light.stop();
}

void do_heat(Heater &heater) {
    if (heater.on_temperature) heater.start();
    else heater.stop();
}

void do_pump(Pump &pump) {
    if (pump.is_active) pump.start();
    else pump.stop();
}

void pins_init() {
    pinMode(LAMP_PIN, OUTPUT);
    pinMode(FAN_PIN, OUTPUT);
    pinMode(HEATER_PIN, OUTPUT);
    pinMode(PUMP_PIN, OUTPUT);
    pinMode(LIGHTING_PIN, INPUT);
}

Datatime datatime;
Climate climate_tomato;
Thermometer thermometer(DHT_PIN);
Heater heater(HEATER_PIN);
Ventilator ventilator(FAN_PIN);
Soil_Humidifier soil_humidifier(HUM_SOIL_PIN);
Air_Humidifier air_humidifier(DHT_PIN);
Pump pump(PUMP_PIN, 5000);
Light light(LAMP_PIN);
Photoresistor photoresistor(LIGHTING_PIN);

void setup() {
    Serial.begin(9600);
    dht.begin();
    datatime.set_time(15, 30, 0);
    set_climate_tomato(climate_tomato);
    pins_init();
}

void loop() {
    datatime.update_time();

    control_ventilation(datatime, ventilator);
    control_temperature(climate_tomato, thermometer, heater, ventilator);
    control_soil_humidity(climate_tomato, pump, soil_humidifier, heater);
    control_lighting(datatime, climate_tomato, light, photoresistor);

    do_ventilation(ventilator);
    do_light(light);
    do_heat(heater);
    do_pump(pump);

    delay(500); // небольшая пауза
}
